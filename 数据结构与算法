数据结构
    数据结构是指数据元素的集合及元素间的相互关系和构造方法，结构是指元素之间的关系。

数据的逻辑结构
    在数据结构中，元素之间的相互关系成为数据的逻辑结构

线性结构和非线性结构
    按照逻辑关系的不同将数据结构分为线性结构和非线性结构。

线性结构
    其中线性结构包括线性表、栈、队列、串
    
非线性结构
    非线性结构主要包括树和图
    
存储结构
    数据元素之间关系的存储形式称为存储结构
    可分为 顺序存储 和 连接存储 两种基本方式
    
算法与数据结构密切相关，数据结构是算法设计的基础，合理的数据结构可使算法简单而高效。


——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

线性结构
    线性结构的特点是数据元素之间是一种线性关系，即数据元素“一个接一个地排列”，这种结构主要用于描述具有单一前驱和后继的数据关系。（前驱后继baidu）

线性表
    线性表是最简单、最基本、也是最常用的一种线性结构，它有顺序存储和链式存储两种存储方法，主要的基本运算未插入、删除和查找。
    
    ___________________________________________________________________________________________________________________________
    链式存储结构：
        链式存储结构，又叫链接存储结构。在计算机中用一组任意的存储单元存储线性表的数据元素(这组存储单元可以是连续的,也可以是不连续的).
        它不要求逻辑上相邻的元素在物理位置上也相邻.因此它没有顺序存储结构所具有的弱点,但也同时失去了顺序表可随机存取的优点.
        
        文件的链式存储：
            一般在计算机的硬盘中，文件都是链式存储的。我们知道，多个扇区组成一个簇，簇是计算机存储数据的基本单位。而一个文件是存储在多个在空间上
            也许并不相连的簇中的。这就是链式存储。但是为了能够读取出这个文件，计算机会在该文件第一部分的尾部写上第二部分所在的簇号。第二部分的
            尾部又写上第三部分，以此类推，最后一部分写上一段代码，表示这是该文件的最后一部分。值得一提的是，高簇号在后。（如代码所示的1234实为簇3412）
            文件所占簇可认为是随机分配的。
        
        链式存储结构特点：
            1、比顺序存储结构的存储密度小(链式存储结构中每个结点都由数据域与指针域两部分组成，相比顺序存储结构增加了存储空间)。
            2、逻辑上相邻的节点物理上不必相邻。
            3、插入、删除灵活 (不必移动节点，只要改变节点中的指针)。
            4、查找结点时链式存储要比顺序存储慢。
            5、每个结点是由数据域和指针域组成。
            6、由于簇是随机分配的，这也使数据删除后覆盖几率降低，恢复可能提高。
     _______________________________________________________________________      


1.线性表的定义
    一个线性表是n个元素的有限序列(n>=0), 通常表示为(a1, a2, ..., a4)
    其特点是在非空的线性表中：
        (1) 存在唯一的一个称作“第一个”的元素。
        (2) 存在唯一的一个称作“最后一个”的元素。
        (3) 除第一个元素外，序列中的每个元素均只有一个直接前驱。
        (4) 出最后一个元素外，序列中的每个元素均只有一个直接后驱。

2.线性表的存储结构
    线性表的存储结构分为数序和链式两种基本方式。    
    
    1）线性表的顺序存储
        线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的数据元素，从而使得逻辑上相邻得两个元素在物理位置上也相邻，
        如图(图在书上page279)所示。在这种存储方式下，元素间的逻辑关系无需占用额外的空间来表示。
        
        一般的，以LOC(a1)表示线性表中的一个元素得存储位置，L表示每个元素所占存储单元的个数，则在顺序存储结构中，第i个元素ai的存储位置为
            LOC(ai) = LOC(ai) + (i-1) * L
        
        根据该计算关系，对表中任意元素进行访问所需时间相同(即随机存取)。
        
        线性表采用顺序存储的优点是可以随机存取表中的元素，按序号查找元素的顺序很快。缺点是插入和删除操作需要移动元素，插入前要移动元素以
        挪出空的存储单元，然后再插入元素；删除时同样需要移动元素，以填充被删除的元素空出来的存储单元。
        
        在表长为 n 的线性表中插入一个新元素时，共有n+1个可能的插入位置，在位置 1(元素a1所在位置)插入时需要移动 n 个元素，在位置n+1(元素an
        所在位置之后)插入时不需要移动元素，因此，在等概率下插入一个元素时平均的移动元素个数E(insert)为
            这个公式打不出来，是一个计算平局概率的式子
        在表长为 n 的线性表中删除一个元素时，共有 n 个可删除的元素，删除a1时需要移动n-1个元素，删除an时不需要移动元素
            这里也有一个计算概率的公式
    2)线性表的链式存储
        线性表的链式存储是用结点来存储数据元素，元素的结点地址可以连续，也可以不连续，因此，存储数据元素的同时必须存储元素之间的逻辑关系。
        基本的结点结构如下所示。
            ________________
            |数据域 | 指针域|
            ----------------
        其中数据域用于存储数据元素的值，指针域则存储当前元素的直接前驱或直接后继的位置信息，指针域中的信息称为指针(或链)。
        
        n 个结点通过指针连成一个链表，若节点中只有一个指针域，则称为线性链表(或单链表), 如图(page 280)
        
        在链式存储结构中，只需要一个指针(称为头指针)指向第一个结点，就可以顺序访问到表中的任一个元素。为了简化对链表状态的判定和处理，
        特别引入一个不存储数据元素的结点，称为头结点，将其作为链表的第一个结点并令头指针指向该结点。
        
        在链式存储结构下进行插入和删除，其实质都是对相关指针的修改。
        
        设单链表结点类型的定义为：
            typedef struct node{
                    int data;             /*数据域*/
                    struct node *link;    /*指针域*/
            }NODE, *LinkList;
        
        在单链表中删除 p 所指结点的后继结点时，操作如下。
            p->link = p->link->link;
        
        在图中，若需删除元素b，则令 p 结点的指针域指向其后继的后继结点(如图)，从而将元素 b 所在的结点从链表中摘除。也可以根据元素的前驱后继
        关系来处理，实际操作中还需考虑被删除结点空间的释放问题。例如，如果要删除图中 p 所指向的结点，则变通的操作如下。
            ① p->data = p->link->data；
            ② q = p->link;
            ③ p->link = p->link->link;
            ④ free(q)
        
        这里有一些示例跳过了，有时间再补
        
        
栈和队列
    栈和队列是程序中常用的两种数据结构，它们的逻辑结构与线性表相同，其特点在于运算受到了限制：
        栈按“先进后出”的规则进行操作，
        队列按“先进先出”的规则进行操作，故称运算受限的线性表。
    1.栈    
        1）栈的定义及基本运算
            (1) 栈的定义
                栈是只能通过访问它的一端来实现数据存储和检索的一种线性数据结构。换句话说，栈的修改是按先进后出的原则进行的。
                因此，栈又称为先进后出(FILO, 或先进后出)的线性表。
                在栈中进行插入和删除操作的一端称为栈顶(top)，相应地，另一端称为栈底(bottom)。
                不含数据元素的栈称为空栈。
            (2) 栈的基本运算
                ① 初始化栈I逆天Stack(S): 创建一个空栈S。
                ② 判栈空 StackEmpty(S): 当栈S为空栈时返回“真”，否则返回“假”。
                ③ 入栈Push(S, x): 将元素 x 加入栈顶，并更新栈顶指针。
                ④ 出栈Pop(S): 将栈顶元素从栈中删除，并更新栈顶指针。
                ⑤ 读栈顶元素Top(S): 返回栈顶元素的值，但不修改栈顶指针。
        
        2） 栈的存储结构
            (1) 栈的顺序存储。栈的顺序存储是指用一组地址连续的存储单元依次存储自栈顶到栈底的数据元素，同时附设指针top指示栈顶元素的位置。
                顺序栈：采用顺序存储结构的栈称为顺序栈。
                在顺序存储之下，需要预先定义或申请栈的存储空间，也就是说栈空间的容量是有限的。
                因此在顺序栈中，当一个元素入栈时，需要判断是否栈满(即栈空间中没有空闲单元)，若栈满，则元素入栈会发生上溢现象。
        
     
        
        
        
        
        
        
        
        
        
        
